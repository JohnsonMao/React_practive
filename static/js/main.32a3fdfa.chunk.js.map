{"version":3,"sources":["components/Header/index.jsx","components/Nav/index.jsx","components/Item/index.jsx","components/List/index.jsx","components/Footer/index.jsx","App.jsx","index.js"],"names":["Header","newTodo","React","createRef","handleKeyUp","event","keyCode","target","value","trim","todoObj","id","nanoid","name","done","props","addTodo","alert","handleAddTodo","current","className","type","ref","this","onKeyUp","placeholder","onClick","Component","Nav","handleFilter","filterBtn","filterType","Item","handleCheck","updateTodo","checked","handleDelete","window","confirm","deleteTodo","style","onChange","htmlFor","List","todos","filterTodo","map","todo","Footer","handleCheckAll","checkAllTodo","handleClearAllDone","clearAllDone","doneCount","reduce","pre","total","length","App","state","filterTodos","newTodos","setState","filter","filterBtnId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32a3fdfa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport default class Header extends Component {\r\n\r\n    // 對接收的 props 進行: 類型，必要性的限制\r\n    static propTypes = {\r\n        addTodo: PropTypes.func.isRequired\r\n    }\r\n\r\n    // React.createRef 調用後可以返回一個容器，該容器可以儲存被 ref 所標記的節點\r\n    newTodo = React.createRef()\r\n\r\n    // 鍵盤事件的回調函數\r\n    handleKeyUp = ( event ) => {\r\n        // 解構賦值獲取 keyCode, target\r\n        const { keyCode, target } = event;\r\n        // 判斷是否有案 Enter\r\n        if( keyCode !== 13 ) return\r\n        // 添加的 todo 名字不能空白\r\n        if( target.value.trim() === ''){\r\n            alert('請輸入代辦事項');\r\n            return\r\n        }\r\n        // 準備好一個 todo 物件\r\n        const todoObj = { id: nanoid(), name: target.value, done: false };\r\n        // 把 todoObj 傳遞給 App.jsx\r\n        this.props.addTodo( todoObj );\r\n        // 輸入完清空\r\n        target.value = '';\r\n    }\r\n\r\n    // 按鈕事件的回調函數\r\n    handleAddTodo = () => {\r\n        // 解構賦值獲取 value 並重新命名為 name\r\n        let { value: name } = this.newTodo.current;\r\n        // 添加的 todo 名字不能空白\r\n        if( name.trim() === ''){\r\n            alert('請輸入代辦事項');\r\n            return\r\n        }\r\n        // 準備好一個 todo 物件\r\n        const todoObj = { id: nanoid(), name, done: false };\r\n        // 把 todoObj 傳遞給 App.jsx\r\n        this.props.addTodo( todoObj );\r\n        // 輸入完清空\r\n        this.newTodo.current.value = '';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-group bg-white box-shadow rounded-1 overflow-hidden mb-3\">\r\n                <input type=\"text\" \r\n                ref = { this.newTodo }\r\n                onKeyUp = { this.handleKeyUp }\r\n                className=\"form-control flex-fill\" \r\n                placeholder=\"新增代辦事項\"/>\r\n                <button type=\"button\" \r\n                onClick = { this.handleAddTodo }\r\n                className=\"btn btn-size-lg btn-dark rounded-1 m-1\">\r\n                    <i className=\"fas fa-plus\"></i>\r\n                </button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Nav extends Component {\r\n\r\n    // 對接收的 props 進行: 類型，必要性的限制\r\n    static propTypes = {\r\n        filterBtn: PropTypes.func.isRequired,\r\n    }\r\n\r\n    // handleFilter 用來選擇過濾 todo 的代號\r\n    handleFilter = ( event ) => {\r\n        this.props.filterBtn( event.target.id );\r\n    }\r\n\r\n    render() {\r\n        const { filterType } = this.props;\r\n        return (\r\n            <ul className=\"btn-group\">\r\n                <li className={ filterType === \"all\" ? 'col active' : 'col' }>\r\n                    <button className=\"btn\" id=\"all\"\r\n                    onClick={ this.handleFilter }>全部</button>\r\n                </li>\r\n                <li className={ filterType === \"undone\" ? 'col active' : 'col' }>\r\n                    <button className=\"btn\" id=\"undone\"\r\n                    onClick={ this.handleFilter }>待完成</button>\r\n                </li>\r\n                <li className={ filterType === \"done\" ? 'col active' : 'col' }>\r\n                    <button className=\"btn\" id=\"done\"\r\n                    onClick={ this.handleFilter }>已完成</button>\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Item extends Component {\r\n\r\n    // 是否勾選的回調函數，使用高階函數的方法\r\n    handleCheck = ( id ) => {\r\n        return ( event ) => {\r\n            this.props.updateTodo( id, event.target.checked )\r\n        }\r\n    }\r\n\r\n    // 刪除一個 todo 的回調函數，不使用高階函數的方法\r\n    handleDelete = ( id ) => {\r\n        if( window.confirm('確定刪除嗎？') ){\r\n            this.props.deleteTodo( id );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id, name, done } = this.props;\r\n        return (\r\n            <div>\r\n                <li className=\"input-group\"\r\n                style={ true ? {} : { display: \"none\" }} >\r\n                    <input type=\"checkbox\" id={ id }\r\n                    className=\"form-check m-4\"\r\n                    checked={ done }\r\n                    onChange={ this.handleCheck( id ) } />\r\n                    <label htmlFor={ id } className=\"flex-fill py-4\">\r\n                        { done ? <del>{ name }</del> : name }\r\n                    </label>\r\n                    <button type=\"button\" \r\n                    onClick = { () => this.handleDelete(id) }\r\n                    className=\"btn btn-size-base list-btn-warning m-4\">\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button>\r\n                </li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Item from '../Item';\r\n\r\nexport default class List extends Component {\r\n\r\n    // 對接收的 props 進行: 類型，必要性的限制\r\n    static propTypes = {\r\n        todos: PropTypes.array.isRequired,\r\n        filterTodos: PropTypes.array.isRequired,\r\n        updateTodo: PropTypes.func.isRequired,\r\n        deleteTodo: PropTypes.func.isRequired,\r\n    }\r\n\r\n    render() {\r\n        const { todos, filterTodo, updateTodo, deleteTodo } = this.props\r\n        return (\r\n            <div className=\"list-frame vh-55\">\r\n                <ul className=\"list-group\">\r\n                    {\r\n                        todos.map( todo => {\r\n                            return <Item key = { todo.id } \r\n                                {...todo} \r\n                                updateTodo = { updateTodo }\r\n                                deleteTodo = { deleteTodo } />\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Footer extends Component {\r\n\r\n    // 全選 checkbox 的回調函數\r\n    handleCheckAll = ( event ) => {\r\n        this.props.checkAllTodo( event.target.checked )\r\n    }\r\n\r\n    // 清除已完成的回調函數\r\n    handleClearAllDone = () => {\r\n        this.props.clearAllDone()\r\n    }\r\n\r\n    render() {\r\n        const { todos } = this.props;\r\n\r\n        // 已完成的數量\r\n        const doneCount = todos.reduce(( pre, todo ) => pre + ( todo.done ? 1 : 0 ), 0)\r\n        // 總數\r\n        const total = todos.length;\r\n\r\n        return (\r\n            <div className=\"d-flex justify-content-between mb-2\">\r\n                <div className=\"d-flex align-items-center\">\r\n                    <input type=\"checkbox\" \r\n                    className=\"form-check m-4\"\r\n                    checked = { doneCount === total && total !== 0 ? true : false } \r\n                    onChange = { this.handleCheckAll } />\r\n                    <h3 className=\"text-dark-gray\">已完成 { doneCount } / 全部 { total }</h3>\r\n                </div>\r\n                <button type=\"button\" \r\n                className=\"btn btn-text-warning m-4 me-8\"\r\n                onClick = { this.handleClearAllDone } >清除已完成項目</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from './components/Header';\r\nimport Nav from './components/Nav';\r\nimport List from './components/List';\r\nimport Footer from './components/Footer';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n\r\n    // 初始化狀態\r\n    state = {\r\n        // 0 代表顯示全部，1 代表顯示待完成，2 代表顯示完成\r\n        filterType: \"all\",\r\n        todos: [\r\n        {id: '001', name: '把冰箱發霉的檸檬拿去丟', done: false},\r\n        {id: '002', name: '打電話叫媽媽匯款給我', done: true},\r\n        {id: '003', name: '整理電腦資料夾', done: false},\r\n        {id: '004', name: '繳電費水費瓦斯費', done: true},\r\n        {id: '005', name: '刪訊息', done: false},\r\n        {id: '006', name: '約 vicky 禮拜三泡溫泉', done: false},\r\n        {id: '007', name: '約 ada 禮拜四吃晚餐', done: false},\r\n        ],\r\n        filterTodos: [],\r\n    }\r\n\r\n    // addTodo 用來添加 todo，接收的參數是 todo 物件\r\n    addTodo = ( todoObj ) => {\r\n        // 獲取原 todos\r\n        const { todos } = this.state;\r\n        // 新增一個 todos\r\n        const newTodos = [todoObj,...todos];\r\n        // 更新狀態\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    // updateTodo 用來更新一個 todo 物件\r\n    updateTodo = ( id, done ) => {\r\n        // 獲取狀態中的 todos\r\n        const { todos } = this.state;\r\n        // 匹配數據處理\r\n        const newTodos = todos.map( todoObj => {\r\n            if( todoObj.id === id ) return {...todoObj, done}\r\n            else return todoObj\r\n        })\r\n        // 更新狀態\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    // deleteTodo 用來刪除一個 todo 物件\r\n    deleteTodo = ( id ) => {\r\n        // 獲取狀態中的 todos\r\n        const { todos } = this.state;\r\n        // 刪除指定 id 的 todo 物件\r\n        const newTodos = todos.filter( todoObj => {\r\n            return todoObj.id !== id\r\n        })\r\n        // 更新狀態\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    // checkAllTodo 用來全選\r\n    checkAllTodo = ( done ) => {\r\n        // 獲取狀態中的 todos\r\n        const { todos } = this.state;\r\n        // 加工數據\r\n        const newTodos = todos.map( todoObj => {\r\n            return {...todoObj, done }\r\n        })\r\n        // 更新狀態\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    // clearAllDone 用來清除已完成的\r\n    clearAllDone = () => {\r\n        // 獲取狀態中的 todos\r\n        const { todos } = this.state;\r\n        // 過濾數據\r\n        const newTodos = todos.filter( todoObj => {\r\n            return !todoObj.done\r\n        })\r\n        // 更新狀態\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    // filterBtn 用來決定過濾類型\r\n    filterBtn = ( filterBtnId ) => {\r\n        this.setState({ filterType: filterBtnId });\r\n        // 獲取狀態中的 todos\r\n        const { filterType, todos } = this.state;\r\n        // 分類數據\r\n        const newTodos =\r\n            filterType === 'undone' ? todos.filter( todoObj => {\r\n                return !todoObj.done\r\n            }) :\r\n            filterType === 'done' ? todos.filter( todoObj => {\r\n                return todoObj.done\r\n            }) : \r\n            todos ;\r\n        this.setState({ filterTodos: newTodos });\r\n    }\r\n\r\n    // filterTodo 用來過濾分類清單\r\n    filterTodo = ( id, done ) => {\r\n        // 獲取狀態中的 todos\r\n        const { filterType, todos } = this.state;\r\n        // 分類數據\r\n        const newTodos =\r\n            filterType === 'undone' ? todos.filter( todoObj => {\r\n                return !todoObj.done\r\n            }) :\r\n            filterType === 'done' ? todos.filter( todoObj => {\r\n                return todoObj.done\r\n            }) : \r\n            todos ;\r\n        this.setState({filterTodos: newTodos});\r\n    }\r\n\r\n    render() {\r\n        const { filterType, todos, filterTodos } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"h1 py-4\">TODOLIST</h1>\r\n                <Header addTodo = { this.addTodo } />\r\n                \r\n                <div className=\"bg-white box-shadow rounded-1 overflow-hidden\">\r\n                    <Nav filterType = { filterType } \r\n                        filterBtn = { this.filterBtn } />\r\n                    <List todos = { todos } \r\n                        filterTodos = { filterTodos }\r\n                        filterTodo = { this.filterTodo }\r\n                        updateTodo = { this.updateTodo } \r\n                        deleteTodo = { this.deleteTodo } />\r\n                    <Footer todos = { todos } \r\n                        checkAllTodo = { this.checkAllTodo }\r\n                        clearAllDone = { this.clearAllDone } />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}